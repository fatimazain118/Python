We learned about constructor and its functionality, where we had to set all the values as parameters to a constructor. Now we will learn how to use a method as a constructor. 
It has its own advantages. By using a method as a constructor, we would be able to pass the values to it using a string.
The parameters that we have to pass to our constructor would be the class i.e., cls and the string containing the parameters. Moving on towards the working, we have to use a
function "split()," that will divide the string into parts. And the parts as results will be stored in a list. 
What split() does is, it takes a separator as a parameter. If we do not provide any, then the default separator is any whitespace it encounters. 


class Employee:
    pass
    def __init__(self, _name, _salary, _role):          #default constructor
        self.name = _name
        self.salary = _salary
        self.role = _role
    # def printdetails(self):
    #     return f"The Name of Employee is {self.name},this salary is {self.salary} and role is {self.role}"

    @classmethod
    def from_str(cls, string):
        params = string.split("-")   #yha list bn jari aur jaha "-" hai wha se split hokr alg alg list bnegi
        print(params)
        return cls(params[0], params[1], params[2])

# harry = Employee("Harry", 480, "SDE") or else we can do like below
rohan = Employee.from_str("rohan-4000-Student")
# print(harry.printdetails())
print(rohan.salary)
___________________________________________________________________________________________________________________
***************Output*****************
['rohan', '4000', 'Student']
4000
_____________________________________________________________________________________________
We first create a class method as a constructor that takes the string and split it based on the specified operator. For this purpose, we use a split() function, which takes
the separator as a parameter. 

class Employee:
    pass
    def __init__(self, _name, _salary, _role):
        self.name = _name
        self.salary = _salary
        self.role = _role
        
     @classmethod
     def from_str(cls, string):
         return cls(*string.split("-"))                  #in one line "*" lgaya to as an argument pass hojaigi
         
rohan = Employee.from_str("rohan-4000-Student")
print(rohan.salary)
____________________________________________________________________
**********Output*************
4000
         
